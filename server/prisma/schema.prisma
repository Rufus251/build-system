// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// https://app.creately.com/d/IWvhr3yfYfw/view

model User {
  id Int @id @default(autoincrement())

  // admin, manager, user
  role String @default("user")

  // Объекты к которым ПРИВЯЗАН пользователь (т.е. например он работает на 2 и 4 объекте, соответственно он к ним привязан) 
  // НЕ ТОТ КТО ИХ СОЗДАЛ
  objects ObjectOnUser[]
  report  Report[]

  login    String  @unique
  name     String
  password String
  phone    String
  token    String?
}

model ResidentialComplex {
  id Int @id @default(autoincrement())

  objects Object[]

  name String @unique
}

model ObjectOnUser {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  object   Object @relation(fields: [objectId], references: [id], onDelete: Cascade)
  objectId Int

  @@id([userId, objectId])
}

model Object {
  id Int @id @default(autoincrement())

  residentialComplex   ResidentialComplex @relation(fields: [residentialComplexId], references: [id], onDelete: Cascade)
  residentialComplexId Int

  ObjectOnUser ObjectOnUser[]

  smeta Smeta?

  report Report[]

  name         String @unique
  contractName String
}

model Smeta {
  id Int @id @default(autoincrement())

  object   Object @relation(fields: [objectId], references: [id], onDelete: Cascade)
  objectId Int    @unique

  mainWorksName       MainWorksName[]
  additionalWorksName AdditionalWorksName[]

  name String
}

// основные работы из сметы
model MainWorksName {
  id Int @id @default(autoincrement())

  smeta   Smeta @relation(fields: [smetaId], references: [id], onDelete: Cascade)
  smetaId Int

  name     String
  unit     String
  maxValue Int
  done     Int
  left     Int

  ReportRow ReportRow[]
}

// доп работы из сметы
model AdditionalWorksName {
  id Int @id @default(autoincrement())

  smeta   Smeta @relation(fields: [smetaId], references: [id], onDelete: Cascade)
  smetaId Int

  name  String
  unit  String
  total Int

  ReportRow ReportRow[]
}

model Report {
  id Int @id @default(autoincrement())

  object   Object @relation(fields: [objectId], references: [id], onDelete: Cascade)
  objectId Int

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  // "main" / "additional"
  workType String

  workDate      DateTime
  weather       String
  temperature   String
  workersAmount Int
  ItrAmount     Int

  workDone    WorkDone?
  workPlan    WorkPlan?
  problems    Problems?
  hasProblems Boolean

  additional    String
  hasAdditional Boolean

  createdAt DateTime @default(now())
}

// Для каждого отчёта генерируется один workDone и один workPlan.
// К workDone привязывается несколько строк отчёта
// К workPlan привязывается несколько строк отчёта
// После отчёт имеет факт и план

// факт работ в отчёте
model WorkDone {
  id Int @id @default(autoincrement())

  Report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId Int    @unique

  doneDate DateTime

  rows ReportRow[]

  createdAt DateTime @default(now())
}

// план работ в отчёте
model WorkPlan {
  id Int @id @default(autoincrement())

  Report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId Int    @unique

  planDate DateTime

  rows ReportRow[]

  createdAt DateTime @default(now())
}

model ReportRow {
  id Int @id @default(autoincrement())

  // row type (факт, план) / fact, plan
  rowType    String?
  WorkDone   WorkDone? @relation(fields: [workDoneId], references: [id], onDelete: Cascade)
  workDoneId Int?
  WorkPlan   WorkPlan? @relation(fields: [WorkPlanId], references: [id], onDelete: Cascade)
  WorkPlanId Int?

  // types (main, additional)
  // данные о работе (название, тип, единица измеения. Находить по идшнику)
  workType              String?
  MainWorksName         MainWorksName?       @relation(fields: [MainWorksNameId], references: [id])
  MainWorksNameId       Int?
  AdditionalWorksName   AdditionalWorksName? @relation(fields: [AdditionalWorksNameId], references: [id])
  AdditionalWorksNameId Int?

  planNumberOfFloor    Int
  planQuantityPerFloor Int
  planTotal            Int

  factNumberOfFloor    Int
  factQuantityPerFloor Int
  factTotal            Int

  room          String
  brigade       String
  workersAmount Int
  comment       String
}

model Problems {
  id Int @id @default(autoincrement())

  Report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId Int    @unique

  ProblemsRow ProblemsRow[]
}

model ProblemsRow {
  id Int @id @default(autoincrement())

  problems   Problems? @relation(fields: [problemsId], references: [id], onDelete: Cascade)
  problemsId Int?

  description   String
  takenMeasures String
}
